#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
// Define a structure to represent a firewall rule
struct firewall_rules {
char ip_string[31]; // Source IP address (string), considering two IPs
separated by '-'
int source_port; // Source port number
};
// Function to check if an IP address block is valid (0-255)
bool isValidIPBlock(const char *block) {
int value = atoi(block);
return value >= 0 && value <= 255;
}
// Function to check if a port number is valid (0-65535)
bool isValidPort(int port) {
return port >= 0 && port <= 65535;
}
// Function to parse an IP address and check if all blocks are valid
bool isValidIPAddress(const char *ip) {
char ipCopy[31];
strcpy(ipCopy, ip);
char *token = strtok(ipCopy, ".");
while (token != NULL) {
if (!isValidIPBlock(token)) {
return false;
}
token = strtok(NULL, ".");
}
return true;
}
// Compare function for qsort to sort firewall rules
int compareFirewallRules(const void *a, const void *b) {
const struct firewall_rules *ruleA = (struct firewall_rules *)a;
const struct firewall_rules *ruleB = (struct firewall_rules *)b;
// Check for ill-formed rules
bool isValidA = isValidIPAddress(ruleA->ip_string) && isValidPort(ruleA-
>source_port);
bool isValidB = isValidIPAddress(ruleB->ip_string) && isValidPort(ruleB-
>source_port);
if (!isValidA && !isValidB) {
return 0; // Both are ill-formed
} else if (!isValidA) {
return -1; // A is ill-formed
} else if (!isValidB) {
return 1; // B is ill-formed
}
// Implement your comparison logic here
// Compare source IP and port
int ipCompare = strcmp(ruleA->ip_string, ruleB->ip_string);
if (ipCompare != 0) {
return ipCompare;
}
if (ruleA->source_port != ruleB->source_port) {
return ruleA->source_port - ruleB->source_port;
}
return 0; // Implement your comparison logic
}
int main(int argc, char *argv[]) {
if (argc != 2) {
printf("Usage: %s <filename>\n", argv[0]);
return 1;
}
const char *filename = argv[1];
FILE *file = fopen(filename, "r");
if (file == NULL) {
perror("Error opening the file");
return 1;
}
struct firewall_rules rules[1000]; // Assuming there are at most 1000 rules
int ruleCount = 0;
char line[256];
printf("Ill-formed Rules:\n");
while (fgets(line, sizeof(line), file) != NULL) {
char source_ip[31];
int source_port;
if (sscanf(line, "%30s %d", source_ip, &source_port) == 2) {
// Rule with source IP and source port
strcpy(rules[ruleCount].ip_string, source_ip);
rules[ruleCount].source_port = source_port;
if (!(isValidIPAddress(source_ip) && isValidPort(source_port))) {
printf("%s", line); // Print ill-formed rule
}
ruleCount++;
} else {
printf("%s", line); // Print ill-formed rule
}
}
fclose(file);
// Sort the firewall rules
qsort(rules, ruleCount, sizeof(struct firewall_rules), compareFirewallRules);
// Print the sorted rules while maintaining the original format
printf("Sorted Firewall Rules:\n");
for (int i = 0; i < ruleCount; i++) {
if (isValidIPAddress(rules[i].ip_string) &&
isValidPort(rules[i].source_port)) {
printf("%s %d\n", rules[i].ip_string, rules[i].source_port);
}
}
return 0;
}
